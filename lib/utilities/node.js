"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    isLessThan: function() {
        return isLessThan;
    }
});
function isLessThan(nodeA, nodeB) {
    var lessThan = null;
    var ancestorNodesA = ancestorNodesFromNode(nodeA), ancestorNodesB = ancestorNodesFromNode(nodeB), ancestorNodesALength = ancestorNodesA.length, ancestorNodesBLength = ancestorNodesB.length, minimumAncestorNodesLength = Math.min(ancestorNodesALength, ancestorNodesBLength);
    for(var index = 0; index < minimumAncestorNodesLength; index++){
        var ancestorNodeA = ancestorNodesA[index], ancestorNodeB = ancestorNodesB[index];
        if (ancestorNodeA !== ancestorNodeB) {
            var parentIndex = index - 1, ancestorNodeAParentNode = ancestorNodesA[parentIndex], parentNode = ancestorNodeAParentNode, childNodeA = ancestorNodeA, childNodeB = ancestorNodeB, indexA = parentNode.indexOfChildNode(childNodeA), indexB = parentNode.indexOfChildNode(childNodeB);
            lessThan = indexA < indexB;
            break;
        }
    }
    if (lessThan === null) {
        lessThan = ancestorNodesALength < ancestorNodesBLength;
    }
    return lessThan;
}
var _default = {
    isLessThan: isLessThan
};
function ancestorNodesFromNode(node) {
    var ancestorNodes = node.getAncestorNodes();
    ancestorNodes.unshift(node);
    ancestorNodes.reverse();
    return ancestorNodes;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVzc1RoYW4obm9kZUEsIG5vZGVCKSB7XG4gIGxldCBsZXNzVGhhbiA9IG51bGw7XG5cbiAgY29uc3QgYW5jZXN0b3JOb2Rlc0EgPSBhbmNlc3Rvck5vZGVzRnJvbU5vZGUobm9kZUEpLFxuICAgICAgICBhbmNlc3Rvck5vZGVzQiA9IGFuY2VzdG9yTm9kZXNGcm9tTm9kZShub2RlQiksXG4gICAgICAgIGFuY2VzdG9yTm9kZXNBTGVuZ3RoID0gYW5jZXN0b3JOb2Rlc0EubGVuZ3RoLFxuICAgICAgICBhbmNlc3Rvck5vZGVzQkxlbmd0aCA9IGFuY2VzdG9yTm9kZXNCLmxlbmd0aCxcbiAgICAgICAgbWluaW11bUFuY2VzdG9yTm9kZXNMZW5ndGggPSBNYXRoLm1pbihhbmNlc3Rvck5vZGVzQUxlbmd0aCwgYW5jZXN0b3JOb2Rlc0JMZW5ndGgpO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBtaW5pbXVtQW5jZXN0b3JOb2Rlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGFuY2VzdG9yTm9kZUEgPSBhbmNlc3Rvck5vZGVzQVtpbmRleF0sXG4gICAgICAgICAgYW5jZXN0b3JOb2RlQiA9IGFuY2VzdG9yTm9kZXNCW2luZGV4XTtcblxuICAgIGlmIChhbmNlc3Rvck5vZGVBICE9PSBhbmNlc3Rvck5vZGVCKSB7XG4gICAgICBjb25zdCBwYXJlbnRJbmRleCA9IGluZGV4IC0gMSxcbiAgICAgICAgICAgIGFuY2VzdG9yTm9kZUFQYXJlbnROb2RlID0gYW5jZXN0b3JOb2Rlc0FbcGFyZW50SW5kZXhdLFxuICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGFuY2VzdG9yTm9kZUFQYXJlbnROb2RlLCAvLy9cbiAgICAgICAgICAgIGNoaWxkTm9kZUEgPSBhbmNlc3Rvck5vZGVBLCAvLy9cbiAgICAgICAgICAgIGNoaWxkTm9kZUIgPSBhbmNlc3Rvck5vZGVCLCAvLy9cbiAgICAgICAgICAgIGluZGV4QSA9IHBhcmVudE5vZGUuaW5kZXhPZkNoaWxkTm9kZShjaGlsZE5vZGVBKSxcbiAgICAgICAgICAgIGluZGV4QiA9IHBhcmVudE5vZGUuaW5kZXhPZkNoaWxkTm9kZShjaGlsZE5vZGVCKTtcblxuICAgICAgbGVzc1RoYW4gPSAoaW5kZXhBIDwgaW5kZXhCKTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxlc3NUaGFuID09PSBudWxsKSB7XG4gICAgbGVzc1RoYW4gPSAoYW5jZXN0b3JOb2Rlc0FMZW5ndGggPCBhbmNlc3Rvck5vZGVzQkxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4gbGVzc1RoYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNMZXNzVGhhblxufTtcblxuZnVuY3Rpb24gYW5jZXN0b3JOb2Rlc0Zyb21Ob2RlKG5vZGUpIHtcbiAgY29uc3QgYW5jZXN0b3JOb2RlcyA9IG5vZGUuZ2V0QW5jZXN0b3JOb2RlcygpO1xuXG4gIGFuY2VzdG9yTm9kZXMudW5zaGlmdChub2RlKTtcblxuICBhbmNlc3Rvck5vZGVzLnJldmVyc2UoKTtcblxuICByZXR1cm4gYW5jZXN0b3JOb2Rlcztcbn0iXSwibmFtZXMiOlsiaXNMZXNzVGhhbiIsIm5vZGVBIiwibm9kZUIiLCJsZXNzVGhhbiIsImFuY2VzdG9yTm9kZXNBIiwiYW5jZXN0b3JOb2Rlc0Zyb21Ob2RlIiwiYW5jZXN0b3JOb2Rlc0IiLCJhbmNlc3Rvck5vZGVzQUxlbmd0aCIsImxlbmd0aCIsImFuY2VzdG9yTm9kZXNCTGVuZ3RoIiwibWluaW11bUFuY2VzdG9yTm9kZXNMZW5ndGgiLCJNYXRoIiwibWluIiwiaW5kZXgiLCJhbmNlc3Rvck5vZGVBIiwiYW5jZXN0b3JOb2RlQiIsInBhcmVudEluZGV4IiwiYW5jZXN0b3JOb2RlQVBhcmVudE5vZGUiLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlQSIsImNoaWxkTm9kZUIiLCJpbmRleEEiLCJpbmRleE9mQ2hpbGROb2RlIiwiaW5kZXhCIiwibm9kZSIsImFuY2VzdG9yTm9kZXMiLCJnZXRBbmNlc3Rvck5vZGVzIiwidW5zaGlmdCIsInJldmVyc2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXFDQSxPQUVFO2VBRkY7O0lBbkNnQkEsVUFBVTtlQUFWQTs7O0FBQVQsU0FBU0EsV0FBV0MsS0FBSyxFQUFFQyxLQUFLO0lBQ3JDLElBQUlDLFdBQVc7SUFFZixJQUFNQyxpQkFBaUJDLHNCQUFzQkosUUFDdkNLLGlCQUFpQkQsc0JBQXNCSCxRQUN2Q0ssdUJBQXVCSCxlQUFlSSxNQUFNLEVBQzVDQyx1QkFBdUJILGVBQWVFLE1BQU0sRUFDNUNFLDZCQUE2QkMsS0FBS0MsR0FBRyxDQUFDTCxzQkFBc0JFO0lBRWxFLElBQUssSUFBSUksUUFBUSxHQUFHQSxRQUFRSCw0QkFBNEJHLFFBQVM7UUFDL0QsSUFBTUMsZ0JBQWdCVixjQUFjLENBQUNTLE1BQU0sRUFDckNFLGdCQUFnQlQsY0FBYyxDQUFDTyxNQUFNO1FBRTNDLElBQUlDLGtCQUFrQkMsZUFBZTtZQUNuQyxJQUFNQyxjQUFjSCxRQUFRLEdBQ3RCSSwwQkFBMEJiLGNBQWMsQ0FBQ1ksWUFBWSxFQUNyREUsYUFBYUQseUJBQ2JFLGFBQWFMLGVBQ2JNLGFBQWFMLGVBQ2JNLFNBQVNILFdBQVdJLGdCQUFnQixDQUFDSCxhQUNyQ0ksU0FBU0wsV0FBV0ksZ0JBQWdCLENBQUNGO1lBRTNDakIsV0FBWWtCLFNBQVNFO1lBRXJCO1FBQ0Y7SUFDRjtJQUVBLElBQUlwQixhQUFhLE1BQU07UUFDckJBLFdBQVlJLHVCQUF1QkU7SUFDckM7SUFFQSxPQUFPTjtBQUNUO0lBRUEsV0FBZTtJQUNiSCxZQUFBQTtBQUNGO0FBRUEsU0FBU0ssc0JBQXNCbUIsSUFBSTtJQUNqQyxJQUFNQyxnQkFBZ0JELEtBQUtFLGdCQUFnQjtJQUUzQ0QsY0FBY0UsT0FBTyxDQUFDSDtJQUV0QkMsY0FBY0csT0FBTztJQUVyQixPQUFPSDtBQUNUIn0=